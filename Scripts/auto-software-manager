#!/bin/sh -e

##########################################################################
#   Script description:
#       Manage software packages
#       
#   History:
#   Date        Name        Modification
#   2020-12-27  J Bacon     Begin
##########################################################################

usage()
{
    printf "Usage: $0\n"
    exit 1
}


##########################################################################
#   Function description:
#       Pause until user presses return
##########################################################################

pause()
{
    local junk
    
    printf "Press return to continue..."
    read junk
}


##########################################################################
#   Main
##########################################################################

if [ $# != 0 ]; then
    usage
fi

case $(auto-ostype) in
FreeBSD)
    installed_cmd='pkg info'
    available_cmd='pkg search ".*"'
    search_cmd='pkg search'
    install_cmd='pkg install -y'
    install_from_source_cmd='auto-install-packages -n -s'
    remove_cmd='pkg remove -y'
    autoremove_cmd='pkg autoremove -y'
    ;;

Darwin|NetBSD|RHEL)
    if ! which pkgin; then
	cat << EOM

$0 currently depends on pkgsrc binary packages and no pkgin
command has been found.

EOM
	exit 1
    fi
    installed_cmd='pkgin list'
    available_cmd='pkgin avail'
    search_cmd='pkgin search'
    install_cmd='pkgin -y install'
    remove_cmd='pkgin -y remove'
    autoremove_cmd='pkgin -y autoremove'
    ;;

*)
    printf "$0: Not supported on $(auto-ostype).\n"
    exit 1
    ;;

esac

while true
do
    clear
    auto-admin-banner
    cat << EOM

To see ports by category, run "ls /usr/ports" and e.g. "ls /usr/ports/audio"
or browse the collection at https://www.freebsd.org/ports/index.html.

1.. List installed packages
2.. List available packages
3.. Search available packages
4.. Install packages
5.. Remove packages
6.. Install port/package from source
7.. Tag a port for installation from source
8.. Tag a binary package as critical
9.. Switch from quarterly to latest packages
Q.. Quit

EOM

    read -p 'Selection? ' resp
    case 0$resp in
    01)
	$installed_cmd | more
	printf "$($installed_cmd | wc -l) packages installed.\n"
	pause
	;;

    02)
	tmpfile=.auto-software-manager-packages.txt
	eval $available_cmd > $tmpfile
	more $tmpfile
	printf "$(cat $tmpfile | wc -l) packages available.\n"
	rm -f $tmpfile
	pause
	;;

    03)
	read -p 'Enter any part of the package name: ' pattern
	$search_cmd "$pattern" | more
	pause
	;;
    
    04)
	read -p 'Enter the package name(s): ' names
	if [ 0"$names" != 0 ]; then
	    $install_cmd $names
	    pause
	fi
	;;
    
    05)
	read -p 'Enter the package name(s): ' names
	if [ 0"$names" != 0 ]; then
	    $remove_cmd $names
	    read -p 'Automatically remove unneeded dependencies? [y]/n ' deps
	    if [ 0$deps != 0n ]; then
		$autoremove_cmd
	    fi
	    pause
	fi
	;;
    
    06)
	read -p 'Enter category/name: ' names
	if [ 0"$names" != 0 ]; then
	    $install_from_source_cmd $names
	    pause
	fi
	;;

    07)
	cat << EOM

Users may need to install some ports from source even though they use binary
packages for most installs, because some ports cannot be packaged for
licensing reasons, to build with non-default options, or to build with
non-portable optimizations (e.g. -march=native).

Tagging a port for installation from source here will inform auto-update-system
that it should be rebuilt from source following "package upgrade" and ports
tree updates.

To avoid compatibility issues, you must ensure that your ports tree and
installed packages are in sync.  This can be ensured by using
auto-update-system (first option in this menu), which compares ports and
package branches for you and updates them together.

Note that using latest packages on tier-2 platforms may make it impossible
to keep them in sync, because latest packages are not built regularly.  On
AMD64, latest packages are built continuously and generally lag behind ports
by no more than a few days.  Hence, mixing on amd64 is very safe as long as
the ports tree and installed packages are up-to-date.
EOM
    pause
    cat << EOM

Mixing quarterly ports and packages is generally safe since port versions
never change except in very rare cases to resolve serious issues.  Quarterly
packages are generally rebuilt quickly to ensure compatibility.

If building with non-default options, you must ensure that the build is
compatible with dependent ports.  (This is an issue whether mixing ports and
packages or building everything from source.)

EOM
	read -p 'category/port? ' port
	if [ 0"$port" != 0 ]; then
	    read -p 'Reason for installing from source? (one word, e.g. license) ' reason
	    auto-mark-install-from-source $port $reason
	    printf "Edit /usr/local/etc/auto-admin/install-from-source to cancel.\n"
	    pause
	fi
	;;
    
    08)
	cat << EOM

Occasionally an important port becomes broken and running "package upgrade"
will remove it from your system as a result. This is almost never an issue
with quarterly packages, but is likely something you will experience
eventually if using latest packages.  

Tagging a package as critical informs auto-update-system that you would like
to be notified that this package is missing from the repository before
proceeding with ports and package upgrades.  Generally these issues are fixed
within a few days to a week, so simply holding off on upgrades for a while
is the easiest solution.

Desktop-installer automatically tags certain packages, such as the chosedn
desktop environment or window manager, xorg, etc.

EOM
	read -p 'Package name? ' package
	if [ 0"$package" != 0 ]; then
	    auto-mark-package-critical $package || true
	    pause
	fi
	;;
    
    09)
	auto-pkg-latest
	pause
	;;
    
    0Q|0q)
	exit 0
	;;

    *)
	printf "Invalid option: $resp\n"
    esac
done

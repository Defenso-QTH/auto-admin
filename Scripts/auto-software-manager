#!/bin/sh -e

##########################################################################
#   Script description:
#       Manage software packages
#       
#   History:
#   Date        Name        Modification
#   2020-12-27  J Bacon     Begin
##########################################################################

usage()
{
    printf "Usage: $0\n"
    exit 1
}


##########################################################################
#   Function description:
#       Pause until user presses return
##########################################################################

pause()
{
    local junk
    
    printf "Press return to continue..."
    read junk
}


##########################################################################
#   Main
##########################################################################

if [ $# != 0 ]; then
    usage
fi

case $(auto-ostype) in
FreeBSD)
    installed_cmd='pkg info'
    available_cmd='pkg search ".*"'
    search_cmd='pkg search'
    install_cmd='pkg install -y'
    remove_cmd='pkg remove -y'
    autoremove_cmd='pkg autoremove -y'
    ;;

Darwin|NetBSD|RHEL)
    if ! which pkgin; then
	cat << EOM

$0 currently depends on pkgsrc binary packages and pkgin
command has been found.

EOM
	exit 1
    fi
    installed_cmd='pkgin list'
    available_cmd='pkgin avail'
    search_cmd='pkgin search'
    install_cmd='pkgin -y install'
    remove_cmd='pkgin -y remove'
    autoremove_cmd='pkgin -y autoremove'
    ;;

*)
    printf "$0: Not supported on $(auto-ostype).\n"
    exit 1
    ;;

esac

while true
do
    clear
    auto-admin-banner
    cat << EOM

To see ports by category, run "ls /usr/ports" and e.g. "ls /usr/ports/audio"
or browse the collection at https://www.freebsd.org/ports/index.html.

1.. List installed packages
2.. List available packages
3.. Search available packages
4.. Install packages
5.. Remove packages
Q.. Quit

EOM

    read -p 'Selection? ' resp
    case 0$resp in
    01)
	$installed_cmd | more
	printf "$($installed_cmd | wc -l) packages installed.\n"
	pause
	;;

    02)
	tmpfile=.auto-software-manager-packages.txt
	eval $available_cmd > $tmpfile
	more $tmpfile
	printf "$(cat $tmpfile | wc -l) packages available.\n"
	rm -f $tmpfile
	pause
	;;

    03)
	read -p 'Enter any part of the package name: ' pattern
	$search_cmd "$pattern" | more
	pause
	;;
    
    04)
	read -p 'Enter the package name(s): ' names
	if [ 0"$names" != 0 ]; then
	    $install_cmd $names
	    pause
	fi
	;;
    
    05)
	read -p 'Enter the package name(s): ' names
	if [ 0"$names" != 0 ]; then
	    $remove_cmd $names
	    read -p 'Automatically remove unneeded dependencies? [y]/n ' deps
	    if [ 0$deps != 0n ]; then
		$autoremove_cmd
	    fi
	    pause
	fi
	;;
    
    0Q|0q)
	exit 0
	;;

    *)
	printf "Invalid option: $resp\n"
    esac
done

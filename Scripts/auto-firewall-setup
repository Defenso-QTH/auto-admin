#!/bin/sh -e

##########################################################################
#   Script description:
#       Configure a basic firewall
#       
#   History:
#   Date        Name        Modification
#   2020-06-30  Jason Bacon Begin
##########################################################################

usage()
{
    printf "Usage: $0\n"
    exit 1
}


##########################################################################
#   Function description:
#       Pause until user presses return
##########################################################################

pause()
{
    local junk
    
    printf "Press return to continue..."
    read junk
}


##########################################################################
#   Main
##########################################################################

if [ $# != 0 ]; then
    usage
fi

auto-root-check $0

cat << EOM

********************************** WARNING **********************************

Changing your firewall settings is likely to terminate existing network
connections, such as ssh sessions, unless you really know what you're doing.

*****************************************************************************

EOM
read -p 'Are you sure you want to proceed? y/[n] ' proceed
if [ 0$proceed != 0y ]; then
    exit
fi

case $(auto-ostype) in
FreeBSD)
    firewall=0
    cat << EOM

Configuring a basic IPFW firewall.  See the FreeBSD Handbook for information
on customizing IPFW or using the PF or IPFILTER firewalls instead.

    https://www.freebsd.org/doc/handbook/firewalls.html

EOM
    pause

    while [ $firewall -lt 1 ] || [ $firewall -gt 6 ]; do
	cat << EOM

The "client" and "simple" rule sets can be customized in /etc/rc.firewall.
For example, to enable incoming SSH (TCP 22) connections, add the following:

    ${fwcmd} add pass tcp from any to me 22 setup

Replace "any" with an IP address specification to limit access.
Add similar rules for HTTP (80), HTTPS (443), 631 (IPP printing).  See
/etc/services for a list of common TCP service ports.

The "workstation" rule set is configured by setting variables such as
firewall_myservices in /etc/rc.conf.  See /etc/rc.firewall for details.

1.. Open (Allow all traffic for now, I'll add my own rules later)
2.. Client (Basic protection for this machine only)
3.. Simple (Protection for entire subnet)
4.. Closed (Block all traffic for now, I'll add my own rules later)
5.. Workstation (Protect this machine only using stateful rules)
6.. Use my custom IPFW rule set

EOM
	firewall=$(auto-ask firewall-type 'Firewall type?' 2)
    done
    sysrc firewall_enable="YES"
    case $firewall in
    1)
	sysrc firewall_type="open"
	;;
    
    2)
	sysrc firewall_type="client"
	while [ 0$subnet = 0 ]; do
	    read -p 'Local subnet? (e.g. 192.168.0.0/16) ' subnet
	done
	sysrc firewall_client_net="$subnet"
	;;
    
    3)
	sysrc firewall_type="simple"
	;;
    
    4)
	sysrc firewall_type="closed"
	;;
    
    5)
	sysrc firewall_type="workstation"
	;;
    
    6)
	script=$(auto-ask custom-ipfw-script "Path to custom script?" /etc/ipfw.rules)
	sysrc firewall_type="$script"
	printf "Install your rule set to $script now.\n"
	pause
	;;
    
    esac
    service ipfw restart
    auto-set-sysctl net.inet.ip.fw.verbose_limit 5 $0
    ;;

*)
    printf "$0: Not supported on $(auto-ostype).\n"
    exit 1
    ;;

esac

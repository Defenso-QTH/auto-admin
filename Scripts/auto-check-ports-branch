#!/bin/sh -e

##########################################################################
#   Script description:
#       Make sure ports branch matches pkg repo
#       
#   History:
#   Date        Name        Modification
#   2020-04-16  J Bacon     Begin
##########################################################################

usage()
{
    printf "Usage: $0\n"
    exit 1
}


##########################################################################
#   Main
##########################################################################

if [ $# != 0 ]; then
    usage
fi

case $(auto-ostype) in
FreeBSD)
    : ${PORTSDIR:=/usr/ports}
    export PORTSDIR
    
    if which svn > /dev/null; then
	svn=svn
    else
	svn=svnlite
    fi
    repo_branch=$(auto-pkg-branch)
    if [ ! -e $PORTSDIR ]; then
	printf "No ports tree at $PORTSDIR.  Checking one out now...\n"
	auto-ports-checkout
    elif [ ! -e $PORTSDIR/.git ]; then
	cat << EOM

All ports checkout methods other than Git are deprecated and your ports tree
is not a Git clone.  Replacing your old ports tree with a Git shallow clone.

Before proceeding, make sure you have no uncommitted changes in
$PORTSDIR or $PORTSDIR/wip.

EOM
	printf "OK to remove old $PORTSDIR? y/[n] "
	read remove_ok
	if [ 0$remove_ok = 0y ]; then
	    find $PORTSDIR -mindepth 0 -maxdepth 0 -exec rm -rf '{}' \;
	    auto-ports-checkout
	else
	    printf "OK, back up $PORTSDIR and try again.\n"
	    exit 0
	fi
    elif (cd $PORTSDIR && git remote -v | fgrep 'fetch' | fgrep 'cgit-beta.FreeBSD.org'); then
	cat << EOM

Your $PORTSDIR is from the beta Git repository.  Would you like to try to
replace it with a new tree from the permanent Git repository?

Before proceeding, make sure you have no uncommitted changes in
$PORTSDIR or $PORTSDIR/wip.

EOM
	printf "OK to remove old $PORTSDIR? y/[n] "
	read remove_ok
	if [ 0$remove_ok = 0y ]; then
	    find $PORTSDIR -mindepth 0 -maxdepth 0 -exec rm -rf '{}' \;
	    auto-ports-checkout
	else
	    printf "OK, keeping $PORTSDIR for now.\n"
	fi
    else
	# Generate name for backup ports dir in case we need it
	c=0
	while [ -e $PORTSDIR/Backup.$c ]; do
	    c=$((c + 1))
	done

	if ! auto-ports-branch; then
	    cat << EOM

Your ports tree is neither head nor quarterly and therefore cannot be
maintained by auto-update-system.  Moving to $PORTSDIR.Backup.$c and checking
out a new ports tree...
EOM
	    mkdir $PORTSDIR/Backup.$c
	    files=$(find $PORTSDIR -depth 1 \! -name 'Backup.*')
	    mv $files $PORTSDIR/Backup.$c
	    auto-ports-checkout
	    if [ -e $PORTSDIR.Backup.$c/wip ]; then
		mv $PORTSDIR.Backup.$c/wip $PORTSDIR
	    fi
	else
	    ports_branch=$(auto-ports-branch)
	    if [ $ports_branch != $repo_branch ]; then
		cat << EOM

Your binary packages are currently from the $repo_branch branch (or they
will be shortly when the new bulk builds complete).

$PORTSDIR is currently using the $ports_branch branch.

Software installed via $PORTSDIR will likely have version mismatches
with the $repo_branch binary packages.  To avoid this, you should replace
$PORTSDIR with the $repo_branch ports branch.

EOM
		printf "Replace $PORTSDIR with $repo_branch? (y/n) [y] "
		read correct
		if [ 0$correct != 0n ]; then
		    # FIXME: Add git support when appropriate
		    if [ -e $PORTSDIR/.svn ] && [ $repo_branch != latest ]; then
			printf "Switching svn repo to $repo_branch...\n"
			cd $PORTSDIR
			url=$($svn info | awk '$1 == "URL:" { print $2 }')
			new_url=$(echo $url | sed -e "s|ports/.*|ports/branches/$repo_branch|")
			$svn switch "$new_url"
		    else
			printf "Saving $PORTSDIR to $PORTSDIR.Backup.$c and checking out $repo_branch...\n"
			mv $PORTSDIR $PORTSDIR.Backup.$c
			# FIXME: Specify repo_branch
			auto-ports-checkout
			if [ -e $PORTSDIR.Backup.$c/wip ]; then
			    mv $PORTSDIR.Backup.$c/wip $PORTSDIR
			fi
		    fi
		fi
	    fi
	fi
    fi
    ;;

*)
    printf "$0: Not supported on $(auto-ostype).\n"
    exit 1
    ;;

esac

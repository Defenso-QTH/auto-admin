#!/bin/sh -e

##########################################################################
#   Script description:
#       
#   Arguments:
#       
#   Returns:
#       
#   History:
#   Date        Name        Modification
#   2016-03-11  Charlie &   Begin
##########################################################################

usage()
{
    printf "Usage: $0 [--binary | --binary+reboot | --defaults | --defaults+reboot | --yes]\n"
    exit 1
}


##########################################################################
#   Main
##########################################################################

##########################################################################
#   Function description:
#       Pause until user presses return
##########################################################################

pause()
{
    local junk
    
    printf "Press return to continue..."
    read junk
}


##########################################################################
#   Function description:
#       
#   Arguments:
#       
#   Returns:
#       
#   History:
#   Date        Name        Modification
#   2016-03-11  Charlie &   Begin
##########################################################################

abuse_warning()
{
    cat << EOM
****************************************************************************

    Running auto-update-system non-interactively can overload the update
    servers if done in parallel.
    
    Run only one instance at a time.
    
    DO NOT ABUSE THIS FEATURE!!

****************************************************************************
EOM
    return 0
}

os_type=`auto-ostype`
mode=interactive
if [ $# = 1 ]; then
    if [ $1 = --binary ]; then
	mode=binary
    elif [ $1 = --binary+reboot ]; then
	mode=binary+reboot
    elif [ $1 = --defaults+reboot ]; then
	mode=defaults+reboot
    elif [ $1 = --defaults ]; then
	mode=defaults
    elif [ $1 = --yes ]; then
	mode=yes
    else
	usage
    fi
fi

case $os_type in
FreeBSD)
    if [ ! -t 0 ]; then
	# Input redirected.  Being fed y/n responses.
	portsnap_flags=--interactive
	freebsd_update_flags=--not-running-from-cron
	abuse_warning
    fi
    
    # Don't group questions: Need to pause after each step to view output
    case $mode in
    binary|binary+reboot|defaults|defaults+reboot|yes)
	update_packages=y
	abuse_warning
	;;
    interactive)
	printf "Update installed packages? [y]/n "
	read update_packages
	;;
    esac
    
    if [ 0$update_packages != 0n ]; then
	case $mode in
	interactive)
	    printf "Autoremove unneeded packages? [y]/n "
	    read autoremove
	    ;;
	*)
	    autoremove=y
	    ;;
	esac
    
	if [ 0$autoremove != 0n ]; then
	    printf "\nRemoving unneeded dependencies...\n"
	    case $mode in
	    interactive)
		pkg autoremove
		;;
	    *)
		pkg autoremove -y
		;;
	    esac
	fi
	
	printf "\nUpdating binary packages...\n"
	pkg update
	pkg clean -y
	pkg upgrade -y
	pkg clean -y
    fi
    
    case $mode in
    defaults|defaults+reboot|yes)
	update_ports=y
	portsnap_flags=--interactive
	;;
    binary|binary+reboot)
	update_ports=n
	;;
    interactive)
	printf "Update ports tree? [y]/n "
	read update_ports
	;;
    esac
    
    if [ 0$update_ports != 0n ]; then
	if [ -e /usr/ports/CHANGES ]; then
	    if [ -e /usr/ports/.svn ]; then
		svn update /usr/ports
	    else
		printf "\nFetching latest ports...\n"
		portsnap fetch
		printf "Applying updates...\n"
		portsnap $portsnap_flags update
	    fi
	else
	    auto-ports-checkout
	fi
    fi
    
    case $mode in
    binary|binary+reboot|defaults|defaults+reboot|yes)
	update_base=y
	freebsd_update_flags=--not-running-from-cron
	;;
    interactive)
	printf "Update base system? [y]/n "
	read update_base
	;;
    esac
    if [ 0$update_base != 0n ]; then
	printf "\nUpdating base system...\n"
	tmpfile=update-system.tmp
	freebsd-update $freebsd_update_flags fetch | tee $tmpfile
	
	if ! fgrep -q 'No updates' $tmpfile; then
	    freebsd-update $freebsd_update_flags install
	fi
	rm $tmpfile
    fi
    ;;

RHEL)
    # Complete interrupted yum updates if the tool is installed and there
    # are any
    case $mode in
    interactive)
	yum-complete-transaction || true
	yum clean all
	yum update
	;;
    binary|defaults)
	yum-complete-transaction || true
	yum clean -y all
	yum update -y
	;;
    binary+reboot|defaults+reboot|yes)
	yes | yum-complete-transaction || true
	yum clean -y all
	yes | yum update -y
	;;
    esac
    ;;

NetBSD)
    # Don't group questions: Need to pause after each step to view output
    # FIXME: Support pkg_upgrade?
    printf "Update installed packages? [y]/n "
    read update_packages
    if [ 0$update_packages != 0n ]; then
	printf "Autoremove unneeded packages? y/[n] "
	read autoremove
	if [ 0$autoremove = 0y ]; then
	    pkgin autoremove
	fi
	pkgin update
	pkgin clean -y
	pkgin upgrade -y
	pkgin clean -y
    fi
    
    printf "Update pkgsrc tree? [y]/n "
    read update_pkgsrc
    if [ 0$update_pkgsrc != 0n ]; then
	cd /usr/pkgsrc
	cvs -q up -dP || true
    fi
    
    printf "Update base system? [y]/n "
    read update_base
    if [ 0$update_base != 0n ]; then
	export CVS_RSH=ssh 
	if [ ! -e /usr/src ]; then
	    cd /usr
	    release=netbsd-`uname -r | cut -d . -f 1,2 | tr . - `
	    printf "Checking out $release src...\n"
	    pause
	    cvs -d anoncvs@anoncvs.NetBSD.org:/cvsroot co -r $release -P src
	    cd src
	else
	    cd /usr/src
	    cvs -q up -dP
	fi
	mkdir -p /usr/obj /usr/tools
	
	# Build tools
	# Added -U to silence warning
	./build.sh -O /usr/obj -T /usr/tools -U -u tools
	
	# Build kernel
	arch=$(uname -m)
	kern=AUTOUPDATE
	cp sys/arch/$arch/conf/GENERIC sys/arch/$arch/conf/$kern
	./build.sh -O ../obj -T ../tools -U kernel=$kern
	
	# Build userland
	./build.sh -O ../obj -T ../tools -U distribution
	
	# Install everything
	mv /netbsd /netbsd.old
	mv /usr/obj/sys/arch/$arch/compile/$kern/netbsd /

	cat << EOM

Rebooting...

After reboot, run the following to install the new userland:

cd /usr/src
./build.sh -O ../obj -T ../tools -U install=/
EOM
	pause
	shutdown -r now
    fi
    ;;

    
*)
    printf "Error: $os_type is not yet supported.\n"
    exit 1
esac

case $mode in
binary|defaults)
    reboot=n
    ;;
binary+reboot|defaults+reboot|yes)
    reboot=y
    ;;
interactive)
    printf "Reboot? y/[n] "
    read reboot
    ;;
esac
if [ 0$reboot = 0y ]; then
    printf "Rebooting...\n"
    shutdown -r now
else
    cat << EOM

Be sure to reboot if you've updated the kernel, or restart any services
affected by package upgrades.

EOM
fi

